{"mappings":"AAAC,IAAWA,ECgJZC,OAAOC,iBAAiB,QAhJxB,WACI,MAAMC,EAAWC,SAASC,iBAAiB,+BAEvCF,GACAA,EAASG,SAAQC,IAEM,IAAfC,EAAYD,EAAOE,cAAc,oBACjCC,EAAaH,EAAOE,cAAc,oBAMzB,IAAIE,OAAOJ,EAAOE,cAAc,WAAY,CACrDG,MAAO,KAOPC,cAAe,EACfC,aAAc,GAYCC,WAAH,CACRC,OAAQN,EACRO,OAAQT,GAK6BU,GAArC,CACAC,gBAAiB,WACb,IAAIC,EAAgBC,KAAKD,cACrBE,EAAgBf,EAAOgB,uBAAuB,gBAAgBH,GAC9DE,GACAE,YAAW,WACPF,EAAcG,UAAUC,OAAO,U,GAChC,I,EAGXC,cAAe,WACX,IAAIC,EAAcP,KAAKO,YACLrB,EAAOgB,uBAAuB,gBAAgBK,GACpDH,UAAUI,IAAI,U,GAIlCC,YAAa,CAET,IAAK,CACDjB,cAAe,IACfC,aAAc,IAGlB,KAAM,CACFD,cAAe,EACfC,aAAc,MAMxB,G,IAuEgC,GD/I5C,mBADUd,EAyBTC,OAAO8B,QAAQC,WAxBOC,UACpBjC,EAAEiC,QACDjC,EAAEkC,mBACFlC,EAAEmC,oBACFnC,EAAEoC,uBACF,SAAUC,GACR,IACE,IAAIC,EAAIjB,KACNkB,GAAKD,EAAElC,UAAYkC,EAAEE,eAAenC,iBAAiBgC,GACrDI,EAAI,EACNF,EAAEE,IAAMF,EAAEE,KAAOH,KAGfG,EACJ,OAAOC,QAAQH,EAAEE,G,GAErB,mBAAqBzC,EAAE2C,UACpB3C,EAAE2C,QAAU,SAAUN,GACrB,IAAK,IAAIC,EAAIjB,KAAMiB,GAAK,IAAMA,EAAEM,UAAY,CAC1C,GAAIN,EAAEL,QAAQI,GAAI,OAAOC,EACzBA,EAAIA,EAAEO,U,CAER,OAAO,I,GAIfzC,SAASF,iBAAiB,oBAAoB,W,kDAGxC4C,EAAe1C,SAASK,cAAiB,sBAC3CsC,EAAmB3C,SAAAC,iBAAc,mBAGnC2C,EAAA1C,SAA8B,SACR2C,GACpBA,EAAA/C,iBAAA,kBACImC,G,mBAKFjC,SAAS8C,KAAKzB,UAAUI,IAAI,c,sCAGdzB,SAAKK,cAAa,sBAClB0C,EAAS,M,wBAOcL,EAARrB,UAAVI,IAAJ,S,OAI0BkB,EAAbzC,SAAR,SAAV2C,GAC6BA,EAAL/C,iBAAjB,SAAT,SAAVmC,GACuC,IAAJe,EAAd/B,KAALsB,QAAR,UAC+BvC,SAAT8C,KAALzB,UAAVC,OAAP,cAC+B0B,EAAZ3B,UAAVC,OAAP,UAC6BoB,EAARrB,UAAVC,OAAP,S,OAI6BtB,SAAT8C,KAALhD,iBACY,SACA,SAAVmC,GAGH,IAFCA,EAAFgB,UAGUjD,SAATK,cAAd,iBAAjBgB,UAAQC,OAAO,UACyBtB,SAATK,cAAd,sBAAdgB,UAAUC,OAAO,UACoBtB,SAAT8C,KAALzB,UAAVC,OAAP,c,IAGmC,GAGEoB,EAAR5C,iBAAjB,SAAT,SAAVmC,GACsCA,EAAFiB,SAAXjB,EAAFkB,gBAGmBnD,SAATK,cAAd,iBAAjBgB,UAAAC,OAAO,UACiCL,KAALI,UAAVC,OAAP,UACsBtB,SAAT8C,KAALzB,UAAVC,OAAP,c","sources":["src/js/modal.js","src/js/slider-con.js"],"sourcesContent":["!(function (e) {\n  'function' != typeof e.matches &&\n    (e.matches =\n      e.msMatchesSelector ||\n      e.mozMatchesSelector ||\n      e.webkitMatchesSelector ||\n      function (e) {\n        for (\n          var t = this,\n            o = (t.document || t.ownerDocument).querySelectorAll(e),\n            n = 0;\n          o[n] && o[n] !== t;\n\n        )\n          ++n;\n        return Boolean(o[n]);\n      }),\n    'function' != typeof e.closest &&\n      (e.closest = function (e) {\n        for (var t = this; t && 1 === t.nodeType; ) {\n          if (t.matches(e)) return t;\n          t = t.parentNode;\n        }\n        return null;\n      });\n})(window.Element.prototype);\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  /* Записываем в переменные массив элементов-кнопок и подложку.\n      Подложке зададим id, чтобы не влиять на другие элементы с классом overlay*/\n  var modalButtons = document.querySelectorAll('.js-open-modal'),\n    overlay = document.querySelector('.js-backdrop-modal'),\n    closeButtons = document.querySelectorAll('.js-modal-close');\n\n  /* Перебираем массив кнопок */\n  modalButtons.forEach(function (item) {\n    /* Назначаем каждой кнопке обработчик клика */\n    item.addEventListener('click', function (e) {\n      /* Предотвращаем стандартное действие элемента. Так как кнопку разные\n            люди могут сделать по-разному. Кто-то сделает ссылку, кто-то кнопку.\n            Нужно подстраховаться. */\n      e.preventDefault();\n      document.body.classList.add('modal-open');\n      /* При каждом клике на кнопку мы будем забирать содержимое атрибута data-modal\n            и будем искать модальное окно с таким же атрибутом. */\n      var modalId = this.getAttribute('data-modal'),\n        modalElem = document.querySelector(\n          '.modal[data-modal=\"' + modalId + '\"]'\n        );\n\n      /* После того как нашли нужное модальное окно, добавим классы\n            подложке и окну чтобы показать их. */\n      modalElem.classList.add('active');\n      overlay.classList.add('active');\n    }); // end click\n  }); // end foreach\n\n  closeButtons.forEach(function (item) {\n    item.addEventListener('click', function (e) {\n      var parentModal = this.closest('.modal');\n      document.body.classList.remove('modal-open');\n      parentModal.classList.remove('active');\n      overlay.classList.remove('active');\n    });\n  }); // end foreach\n\n  document.body.addEventListener(\n    'keyup',\n    function (e) {\n      var key = e.keyCode;\n\n      if (key == 27) {\n        document.querySelector('.modal.active').classList.remove('active');\n        document.querySelector('.js-backdrop-modal').classList.remove('active');\n        document.body.classList.remove('modal-open');\n      }\n    },\n    false\n  );\n\n  overlay.addEventListener('click', function (e) {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n    document.querySelector('.modal.active').classList.remove('active');\n    this.classList.remove('active');\n    document.body.classList.remove('modal-open');\n  });\n}); // end ready","function swiperSlider() {\n    const teamMain = document.querySelectorAll('[data-slider=\"team-slider\"]');\n    //const heroSlider = document.querySelectorAll('[data-slider=\"hero-slider\"]');\n    if (teamMain) {\n        teamMain.forEach(slider => {\n            // кнопки вперед та назад\n            let arrowLeft = slider.querySelector('.swiper-btn-prev');\n            let arrowRight = slider.querySelector('.swiper-btn-next');\n\n            //коментуємо чи видаляемо якщо не потрібно\n            // let pagination = slider.querySelector('.swiper-pagination');\n            //коментуємо чи видаляемо якщо не потрібно\n\n            let swiper = new Swiper(slider.querySelector('.swiper'), {\n                speed: 1500,\n                // автоплей\n                //centeredSlides: true,\n                // autoplay: {\n                //     delay: 3000,\n                //     disableOnInteraction: false,\n                // },\n                slidesPerView: 2, // кількість слайдерів для показу\n                spaceBetween: 40, // відстань між слайдерами\n\n\n                // крапки пагінації\n                // pagination: {\n                //     el: pagination,\n                //     clickable: true,\n                //     renderBullet: function (index, className) {\n                //         return '<li class=\"' + className + '\"></li>';\n                //     },\n                // },\n                // кнопки навігації\n                navigation: {\n                    nextEl: arrowRight,\n                    prevEl: arrowLeft,\n                },\n\n                // додаємо додатковий клас\n                // можна використовувати для додаткових анімацій\n                on: {\n                    transitionStart: function () {\n                        let previousIndex = this.previousIndex;\n                        let previousSlide = slider.getElementsByClassName('swiper-slide')[previousIndex];\n                        if (previousSlide) {\n                            setTimeout(function () {\n                                previousSlide.classList.remove('is-play');\n                            }, 1000);\n                        }\n                    },\n                    transitionEnd: function () {\n                        let activeIndex = this.activeIndex;\n                        let activeSlide = slider.getElementsByClassName('swiper-slide')[activeIndex];\n                        activeSlide.classList.add('is-play');\n                    },\n                },\n                // адаптив\n                breakpoints: {\n                    // when window width is >= 320px\n                    320: {\n                        slidesPerView: 1.2,\n                        spaceBetween: 25,\n                    },\n                    // when window width is >= 768px\n                    1024: {\n                        slidesPerView: 2,\n                        spaceBetween: 40\n                    }\n                    // when window width is >= 1200px\n                    \n                }\n\n            });\n        });\n    }\n    // if (heroSlider) {\n    //     heroSlider.forEach(slider => {\n    //         //\n    //         let arrowLeft = slider.querySelector('.swiper-button-prev');\n    //         let arrowRight = slider.querySelector('.swiper-button-next');\n    //         //\n\n    //         let pagination = slider.querySelector('.swiper-pagination');\n    //         swiper = new Swiper(slider.querySelector('.swiper'), {\n    //             speed: 1500,\n    //             //centeredSlides: true,\n    //             // autoplay: {\n    //             //     delay: 3000,\n    //             //     disableOnInteraction: false,\n    //             // },\n    //             slidesPerView: 1,\n    //             spaceBetween: 20,\n    //             pagination: {\n    //                 el: pagination,\n    //                 clickable: true,\n    //                 renderBullet: function (index, className) {\n    //                     return '<li class=\"' + className + '\"></li>';\n    //                 },\n    //             },\n    //             //\n    //             navigation: {\n    //                 nextEl: arrowRight,\n    //                 prevEl: arrowLeft,\n    //             },\n    //             //\n    //             on: {\n    //                 transitionStart: function () {\n    //                     let previousIndex = this.previousIndex;\n    //                     let previousSlide = slider.getElementsByClassName('swiper-slide')[previousIndex];\n    //                     if (previousSlide) {\n    //                         setTimeout(function () {\n    //                             previousSlide.classList.remove('is-play');\n    //                         }, 1000);\n    //                     }\n    //                 },\n    //                 transitionEnd: function () {\n    //                     let activeIndex = this.activeIndex;\n    //                     let activeSlide = slider.getElementsByClassName('swiper-slide')[activeIndex];\n    //                     activeSlide.classList.add('is-play');\n    //                 },\n    //             },\n    //             breakpoints: {\n    //                 // when window width is >= 320px\n    //                 320: {\n    //                     slidesPerView: 1,\n    //                     spaceBetween: 20,\n    //                 },\n    //                 // when window width is >= 480px\n    //                 768: {\n    //                     slidesPerView: 2,\n    //                     spaceBetween: 30\n    //                 },\n    //                 // when window width is >= 640px\n    //                 1200: {\n    //                     slidesPerView: 3,\n    //                     spaceBetween: 40\n    //                 }\n    //             }\n\n    //         });\n    //     });\n    // }\n}\nwindow.addEventListener('load', swiperSlider, false);"],"names":["e1","window","addEventListener","teamMain","document","querySelectorAll","forEach","slider","arrowLeft","querySelector","arrowRight","Swiper","speed","slidesPerView","spaceBetween","navigation","nextEl","prevEl","on","transitionStart","previousIndex","this","previousSlide","getElementsByClassName","setTimeout","classList","remove","transitionEnd","activeIndex","add","breakpoints","Element","prototype","matches","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","e","t","o","ownerDocument","n","Boolean","closest","nodeType","parentNode","overlay","closeButtons","modalButtons","item","body","modalId","parentModal","keyCode","target","currentTarget"],"version":3,"file":"hotel.63ff1039.js.map"}